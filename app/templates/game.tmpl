{{ $user_profile_pic := index .Account.Auth0Profile "picture" }}

<div id="app" style="z-index:50;">
    <div id="leftGameInfo" class="gameInfo">
      <fieldset class="gameFieldSet">
        <legend style="color:orange;font-weight:bold;">
          <a href="/account/" tabindex="1" style="padding-right:5px;">
            <img class="userProfilePic" style="transform: translateY(15%);" src="{{ $user_profile_pic }}"/>
            &nbsp;&nbsp;{{ .Account.Commander }}'s</a> Ships <template v-if="game.Ships">(${game.Ships.length})</template>
        </legend>

        <template v-if="game.Ships">
        <table v-for="(ship, index) in game.Ships">
          <th>${index + 1}. "${ship.Name}":</th>
          <tr>
            <td align="right">Pos:</td>
            <td align="left"><span>[${ship.Position.X}, ${ship.Position.Y}]</span></td>
          </tr>
          <tr>
            <td align="right">Crystals:</td>
            <td align="left"><span>${ship.Crystals}</span></td>
          </tr>
          <tr>
            <td align="right">Guns:</td>
            <td align="left"><span>${ship.GunPower}</span></td>
          </tr>
          <tr>
            <td align="right">Hull dmg:</td>
            <td align="left"><span>${ship.HullDamage}</span></td>
          </tr>
          <tr>
            <td align="right">Gun dmg:</td>
            <td align="left"><span>${ship.GunDamage}</span></td>
          </tr>
          <tr>
            <td align="right">Docked:</td>
            <td align="left"><span>${ship.Docked}</span></td>
          </tr>
          <tr>
            <td align="right">Type:</td>
            <td align="left"><span>${ship.Type}</span></td>
          </tr>
          <tr>
            <td align="right">Class:</td>
            <td align="left"><span>${ship.Class}</span></td>
          </tr>
        </table>
        </template>
      </fieldset>
    </div>

  <div id="dialogBox" style="top: 10px; display:inline-block;">
    <div class="buttonrow">
      <template v-if="connectionState != 'OPEN'">
      <button class="gameToggle" onclick="connectServer();this.blur();">Engage!</button>
      </template>
      <template v-else>
      <button class="gameToggle" onclick="disconnectServer();this.blur();">Disengage!</button>
      </template>
    </div>
  </div>

  <div id="rightGameInfo" class="gameInfo">
    <fieldset class="gameFieldSet">
      <legend>
      {{ if not .Account.Auth0Token }}
        <a href="javascript:loginAuth0();" class="saveButton" tabindex="1">Save</a>
      {{ else }}
        <a href="javascript:logoutAuth0();" class="saveButton" tabindex="1">Quit</a>
      {{ end }}
      </legend>
      <template v-if="game.Ships">

      <table>
        <tr>
          <td align="right"><span style="text-decoration:underline">Last turn:</span></td>
          <td align="left"><format :value="game.LastTurn" fn="date" /></span></td>
        </tr>
        <tr>
          <td align="right"><span style="text-decoration:underline">Credits:</span></td>
          <td align="left"><span v-text="game.Credits"></span></td>
        </tr>
        <tr>
          <td align="right"><span style="text-decoration:underline">Glory:</span></td>
          <td align="left"><span v-text="game.Glory"></span></td>
        </tr>
      </table>
      </template>
    </fieldset>
  </div>

  <br style="clear: left;" />
</div>

<div id="grid" style="z-index:-1;"></div>

<script type="text/javascript" src="/js/three.min.js"></script>
<script type="text/javascript" src="/js/OrbitControls.js"></script>
<script type="text/javascript" src="/js/hex-grid.min.js"></script>
<script type="text/javascript" src="/js/Sprite.js"></script>
<script type="text/javascript">
// https://github.com/vonWolfehaus/von-grid/blob/master/src/utils/Scene.js
var baseX = 24 * {{ .GridSize }};
var baseY = 32 * {{ .GridSize }};
var baseZ = 90;
var scene = new vg.Scene({
  element: document.getElementById('grid'),
  cameraPosition: {x:baseX, y:baseY, z:baseZ},
  //cameraType: 'OrthographicCamera',
}, true); // true|false for OrbitControls.js

// this constructs the cells in grid coordinate space
// https://github.com/vonWolfehaus/von-grid/blob/master/src/grids/HexGrid.js#L2
var grid = new vg.HexGrid({
  cellSize: 8 // size of individual cells/tiles
  // https://github.com/vonWolfehaus/von-grid/blob/master/src/grids/Cell.js
});

grid.generate({
  size: {{ .GridSize }} // size of the board +1
});

var mouse = new vg.MouseCaster(scene.container, scene.camera);
var selector = new vg.SelectionManager(mouse);
var board = new vg.Board(grid);

// this will generate extruded hexagonal tiles
board.generateTilemap({
  tileScale: 0.96 // you might have to scale the tile so the extruded geometry fits the cell size perfectly
});
scene.add(board.group);
scene.focusOn(board.group);

//var vec = new THREE.Vector3();

function update() {
  mouse.update();
  scene.render();
  requestAnimationFrame(update);
}

selector.onSelect.add(function(obj) {
  // if websocket connection is closed, no selection is possible
  if (wsApp.$data.connectionState == 'OPEN') {
    if (obj.objectType === vg.TILE) {
      // select the sprite if one was already there
      var sprite = obj.entity;
      if (sprite) {  // then select the object
        selector.select(sprite, false); // don't fire the signal when firing manually or you'll cause a stack overflow with recursion
        movingPiece = sprite; // new move
      } else if (movingPiece) {
          moveEntityToCell(movingPiece, obj);
          return;
      }
    } else {
      movingPiece = obj;
    }
  }
}, this);

update();
</script>
<script async src="/js/moment.min.js"></script>
<script async src="/js/ws.js"></script>
<!--script src="/js/md5.js"></script>-->
